/// The respond-from mixin is used when you want something to happen from a specific device width.
/// @requires {variable} breakpoints
/// @param {String} $breakpoint - Breakpoint
/// @param {String} $orientation - Orientation [null]
/// @throws No value found for `$breakpoint`. Please make sure it is defined in `$breakpoints` map.
@mixin respond-from($breakpoint, $orientation: null) {
  @if map-has-key($breakpoints, $breakpoint) {
    @if $orientation == null {
      @media (min-width: #{map-get($breakpoints, $breakpoint)}) {
        @content;
      }
    } @else {
      @media (orientation: $orientation) and (min-width: #{map-get($breakpoints, $breakpoint)}) {
        @content;
      }
    }
  } @else {
    @error 'No value found for `#{$breakpoint}`. ' + 'Please make sure it is defined in `$breakpoints` map.';
  }
}

/// The respond-until mixin is the same as respond-from, but inverse.
/// @requires {variable} breakpoints
/// @param {String} $breakpoint - Breakpoint
/// @param {String} $orientation - Orientation [null]
/// @throws No value found for `$breakpoint`. Please make sure it is defined in `$breakpoints` map.
@mixin respond-until($breakpoint, $orientation: null) {
  @if map-has-key($breakpoints, $breakpoint) {
    @if $orientation == null {
      @media (max-width: #{map-get($breakpoints, $breakpoint) - 1px}) {
        @content;
      }
    } @else {
      @media (orientation: $orientation) and (max-width: #{map-get($breakpoints, $breakpoint) - 1px}) {
        @content;
      }
    }
  } @else {
    @error 'No value found for `#{$breakpoint}`. ' + 'Please make sure it is defined in `$breakpoints` map.';
  }
}

/// The respond-between is usable when you want something to happen between specific device widths.
/// @requires {variable} breakpoints
/// @param {String} $from-breakpoint - Breakpoint
/// @param {String} $to-breakpoint - Breakpoint
/// @param {String} $orientation - Orientation [null]
/// @throws No value found for `$breakpoint`. Please make sure it is defined in `$breakpoints` map.
@mixin respond-between($from-breakpoint, $to-breakpoint, $orientation: null) {
  @if map-has-key($breakpoints, $from-breakpoint) {
    @if map-has-key($breakpoints, $to-breakpoint) {
      @if $orientation == null {
        @media (min-width: #{map-get($breakpoints, $from-breakpoint)}) and (max-width: #{map-get($breakpoints, $to-breakpoint) - 1px}) {
          @content;
        }
      } @else {
        @media (orientation: $orientation) and (min-width: #{map-get($breakpoints, $from-breakpoint)}) and (max-width: #{map-get($breakpoints, $to-breakpoint) - 1px}) {
          @content;
        }
      }
    } @else {
      @error 'No value found for `#{$to-breakpoint}`. ' + 'Please make sure it is defined in `$breakpoints` map.';
    }
  } @else {
    @error 'No value found for `#{$from-breakpoint}`. ' + 'Please make sure it is defined in `$breakpoints` map.';
  }
}

/// Shorthand for grid calculation.
/// @param {Number} $columns - The number of columns to span over.
/// @param {Number} $grid-columns - The total number of columns the grid have.
@mixin grid-generator($columns, $grid-columns) {
  width: (grid($grid-columns) * $columns) + (grid($grid-columns, 'gutter') * ($columns - 1));
  margin-right: grid($grid-columns, 'gutter');
}

/* stylelint-disable max-nesting-depth */
/// Shorthand for all grid sizes.
/// @param {String} $breakpoint - At what breakpoint is this mixin used?
/// @param {Number} $grid-columns - how many cols does this grid have?
@mixin grid-at-breakpoint($breakpoint, $grid-columns) {
  @include respond-from($breakpoint) {
    @for $i from 1 through $grid-columns {
      .o-#{$i}-of-#{$grid-columns}\@#{$breakpoint} {
        @include grid-generator($i, $grid-columns);

        // If divided by 2, remove margin from 2nd child
        @if $grid-columns/$i == 2 {
          &:nth-child(2n) {
            margin-right: 0;
          }

          &:nth-child(2n + 1) {
            clear: left;
          }
        }

        // If divided by 3, remove margin from 3rd child
        @if $grid-columns/$i == 3 {
          &:nth-child(3n) {
            margin-right: 0;
          }

          &:nth-child(3n + 1) {
            clear: left;
          }
        }

        // If divided by 4, remove margin from 4rd child
        @if $grid-columns/$i == 4 {
          &:nth-child(4n) {
            margin-right: 0;
          }

          &:nth-child(4n + 1) {
            clear: left;
          }
        }

        // If divided by 6, remove margin from 6rd child
        @if $grid-columns/$i == 6 {
          &:nth-child(6n) {
            margin-right: 0;
          }

          &:nth-child(6n + 1) {
            clear: left;
          }
        }

        // If divided by 12, remove margin from 6rd child
        @if $grid-columns/$i == 12 {
          &:nth-child(12n) {
            margin-right: 0;
          }

          &:nth-child(12n + 1) {
            clear: left;
          }
        }

        // If divided by itself equals 1, remove margin from last child on row
        @if $grid-columns/$i == 1 {
          &:nth-child(#{$i}n) {
            margin-right: 0;
          }
        }
      }
    }
  }
}
/* stylelint-enable max-nesting-depth */
